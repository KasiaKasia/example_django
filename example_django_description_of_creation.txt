
Create a Clean Workspace:
open cmd and go to the directory : $PycharmProjects
$ mkdir example_django
$ cd example_django
$ virtualenv ./example_django/
$ example_django\Scripts\activate
(example_django)$ pip install django==1.7.7

Creating the Project:
(example_django)$ django-admin.py startproject administration .
./administration 
./example_django
manage.py
Creating the App:

(example_django)$ python ./manage.py startapp people
The administration/settings.py file contains the Django configuration for our project:

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3', 
        'NAME': 'people.db',        
    }
}

(example_django)$ python ./manage.py syncdb

Creating a Model:
Start by creating a simple Person model for our application in people/models.py.

from django.db import models

class Person(models.Model):

    first_name = models.CharField(
        max_length=255,
    )
    last_name = models.CharField(
        max_length=255,

    )

    email = models.EmailField()

    def __str__(self):

        return ' '.join([
            self.first_name,
            self.last_name,
        ])


INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'people',
)

(example_django)$ python ./manage.py syncdb
(example_django)$ python manage.py makemigrations

The basic file views.py implementation in our people application:

from django.views.generic import ListView
from people.models import Person

class ListPersonView(ListView):

    model = Person
    template_name = 'list_person.html'

Defining URLs:
administration/urls.py.

from django.conf.urls import patterns, include, url
import people.views

urlpatterns = patterns('',
    url(r'^$', people.views.ListPersonView.as_view(),
        name='people-list',),
)

Create a templates subdirectory in our people application, and create list_person.html there:

<h1>People</h1>

  {% for person in object_list %}
    <table class="person">
        <tr>
            <td> {{ person }} </td>
        </tr>
    </table>
  {% endfor %}
<a href="{% url 'person-new' %}">add person</a>

$ python manage.py runserver

Creating People:
add the new view:

from django.views.generic import CreateView

class CreatePersonView(CreateView):

    model = Person
    template_name = 'edit_person.html'

    def get_success_url(self):
        return reverse('people-list')

edit_contact.html will look like this:
<h1>Add Person</h1>

<form action="{% url 'person-new' %}" method="POST">
  {% csrf_token %}
  <ul>
    {{ form.as_ul }}
  </ul>
  <input id="save_person" type="submit" value="Save" />
</form>

<a href="{% url 'people-list' %}">back to list</a>

Adding the following line to our urls.py file:
url(r'^new$', people.views.CreatePersonView.as_view(),
        name='person-new',),


Edit Views:

from django.views.generic import UpdateView
class UpdatePersonView(UpdateView):

    model = Person
    template_name = 'edit_person.html'

    def get_success_url(self):
        return reverse('people-list')
Adding the following line to our urls.py file:
 url(r'^edit/(?P<pk>\d+)/$', people.views.UpdatePersonView.as_view(),
        name='people-edit',),


edit person_list.html file:
<h1>People</h1>

  {% for person in object_list %}
    <table class="person">
        <tr>
            <td> {{ person }} </td>
           <td> (<a href="{% url 'people-edit' pk=person.id %}">edit</a>)</td>
        </tr>
    </table>
  {% endfor %}
<a href="{% url 'person-new' %}">add person</a>

Edit edit_person.html:
{% if person.id %}
<h1>Edit Person</h1>
{% else %}
<h1>Add Person</h1>
{% endif %}

<form action="{{ action }}" method="POST">
  {% csrf_token %}
  <ul>
    {{ form.as_ul }}
  </ul>
  <input id="save_person" type="submit" value="Save" />
</form>

<a href="{% url 'people-list' %}">back to list</a>

Deleting Person:
We add the view definition to views.py:

from django.views.generic import DeleteView
class DeletePersonView(DeleteView):

    model = Person
    template_name = 'delete_person.html'

    def get_success_url(self):
        return reverse('people-list')


And create the template, delete_contact.html, in our templates directory.

<h1>Delete Person</h1>

<p>Are you sure you want to delete the person {{ person }}?</p>

<form action="{% url 'person-delete' pk=person.id %}" method="POST">
  {% csrf_token %}

  <input type="submit" value="Yes, delete." />
  <a href="{% url 'people-list"' %}">No, cancel.</a>
</form>

Of course we need to add this to the URL definitions:
url(r'^delete/(?P<pk>\d+)/$', people.views.DeletePersonView.as_view(),
        name='person-delete',),

edit file person_list :
<h1>People</h1>

  {% for person in object_list %}
    <table class="person">
        <tr>
            <td> {{ person }} </td>
            <td> (<a href="{% url 'people-edit' pk=person.id %}">edit</a>)</td>
            <td>{% if person.id %}
                <a href="{% url 'person-delete' pk=person.id %}">Delete</a>
                {% endif %}
            </td>
        </tr>
    </table>
  {% endfor %}
<a href="{% url 'person-new' %}">add person</a>

tests.py

from django.test import TestCase

# Create your tests here.
from people.models import Person

class PersonTests(TestCase):
    """Contact model tests."""

    def test_str(self):

        person = Person(first_name='Name', last_name='last name')

        self.assertEquals(str(person),
            'Name last name',
        )

(example_django)$ python manage.py test
(example_django)$ python manage.py test people

(example_django)$ mkdir administration/static
(example_django)$ cd administration/static
(example_django)$ unzip ~/Downloads/bootstrap-3.3.2.zip

settings.py 
import os.path
 
# Additional locations of static files
STATICFILES_DIRS = (
    # Put strings here, like "/home/html/static" or "C:/www/django/static".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
    os.path.join(
        os.path.dirname(__file__),
        'static',
    ),
)

urls.py:
from django.conf.urls import patterns, include, url
from django.contrib import admin
import people.views
from django.contrib.staticfiles.urls import staticfiles_urlpatterns

urlpatterns = patterns('',
    # Examples:
    # url(r'^$', 'administration.views.home', name='home'),
    # url(r'^blog/', include('blog.urls')),

    url(r'^admin/', include(admin.site.urls)),
    url(r'^$', people.views.ListPersonView.as_view(),
        name='people-list',),
    url(r'^new$', people.views.CreatePersonView.as_view(),
        name='person-new',),
    url(r'^edit/(?P<pk>\d+)/$', people.views.UpdatePersonView.as_view(),
        name='people-edit',),
    url(r'^delete/(?P<pk>\d+)/$', people.views.DeletePersonView.as_view(),
        name='person-delete',),

)
urlpatterns += staticfiles_urlpatterns()